openapi: 3.1.0
info:
  title: Mesto
  x-title-i18n:
    eng: Mesto
    rus: Место
  description: >-
    Photo sharing app of the intresting places all over the world. Users can share his photos and
    like photos of other peoples.


    Some useful links:

    - [Mesto backend repository](https://github.com/gvozdenkov/mesto-project-plus)

    - [Mesto frontend repository](https://github.com/gvozdenkov/mesto)

    - [The source API definition for the
    Mesto](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  x-description-i18n:
    eng: >-
      Photo sharing app of the intresting places all over the world. Users can share his photos and
      like photos of other peoples.

      Some useful links:

      - [Mesto backend repository](https://github.com/gvozdenkov/mesto-project-plus)

      - [Mesto frontend repository](https://github.com/gvozdenkov/mesto)

      - [The source API definition for the
      Mesto](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
    rus: >-
      Приложение для обмена фотографиями интересных мест по всему миру. Пользователи могут делиться
      его фотографиями и ставить лайки фотографиям других людей.

      Полезные ссылки:

      - [Репозиторий бэкенда](https://github.com/gvozdenkov/mesto-project-plus)

      - [Репозиторий фронтенда](https://github.com/gvozdenkov/mesto)

      - [Исходник OpenApi
      API](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  contact:
    email: gvozdenkov@gmail.com
  license:
    name: MIT
    url: https://opensource.org/license/mit/
  version: 1.0.0

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io

servers:
  - url: https://localhost:3000/api/v1
    description: Local dev server

tags:
  - name: card
    description: Operations about card
  - name: user
    description: Operations about user

paths:
  /cards:
    get:
      tags:
        - card
      summary: Get all cards
      operationId: getCards
      responses:
        '200':
          description: OK
          $ref: '#/components/responses/CardArray'
        '404':
          description: Cards not found
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - card
      summary: Add a new card
      operationId: addCard
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Create a new card
        content:
          application/json:
            schema:
              type: object
              properties:
                'name':
                  type: string
                  description: Card name
                'link':
                  type: string
                  description: Valid URL to the image
            examples:
              CreateCardA:
                $ref: '#/components/examples/CreateCardA'
              CreateCardB:
                $ref: '#/components/examples/CreateCardB'
              CreateCardC:
                $ref: '#/components/examples/CreateCardC'

      responses:
        '200':
          description: OK
          $ref: '#/components/responses/Card'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          description: Incorrect data was transmitted when creating a card
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /cards/{cardId}:
    delete:
      tags:
        - card
      summary: Delete card by id
      operationId: deleteCard
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          description: 'uuid of the deleted card'
          required: true
          schema:
            type: string

      responses:
        '200':
          $ref: '#/components/responses/CardArray'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: The card with the specified _id was not found
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /cards/{cardId}/likes:
    put:
      tags:
        - card
      summary: Set card like
      parameters:
        - name: cardId
          in: path
          description: 'uuid of the liked card'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Card'
        '400':
          description: Incorrect data for liking was sent
          $ref: '#/components/responses/BadRequest'
        '404':
          description: A non-existent card _id was passed
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - card
      summary: Remove card like
      parameters:
        - name: cardId
          in: path
          description: 'uuid of the unliked card'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Card'
        '400':
          description: Incorrect data for unliking was sent
          $ref: '#/components/responses/BadRequest'
        '404':
          description: A non-existent card _id was passed
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /users:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                'name':
                  type: string
                  description: User name
                  minLength: 2
                  maxLength: 40
                  format: regex
                  pattern: '[a-zA-Zа-яА-ЯёЁ\s\-]+'
                'about':
                  type: string
                  description: Short text about user
                  minLength: 2
                  maxLength: 200
                  format: regex
                  pattern: '[a-zA-Zа-яА-ЯёЁ\s\-]+'
                'avatar':
                  type: string
                  description: Valid URL to the avatar image
            examples:
              CreateUserA:
                $ref: '#/components/examples/CreateUserA'

      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          description: Incorrect data was passed when creating a user
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - user
      summary: Get a list of all users
      responses:
        '200':
          $ref: '#/components/responses/UserArray'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/me:
    get:
      tags:
        - user
      summary: Get current user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - user
      summary: Update current user
      operationId: updateCurrentUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Update user name and about
        content:
          application/json:
            schema:
              type: object
              properties:
                'name':
                  type: string
                  description: User name
                  examples: [Brendan Eich]
                'about':
                  type: string
                  description: Short text about user
                  examples: [JavaScript Creator]
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          description: Incorrect data was transmitted when updating the profile
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: The user with the specified {userId} was not found
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/me/avatar:
    patch:
      tags:
        - user
      summary: Update current user avatar
      operationId: updateCurrentUserAvatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Update user avatar
        content:
          application/json:
            schema:
              type: object
              properties:
                'avatar':
                  type: string
                  description: Valid image URL
                  examples: [https://techcrunch.com/wp-content/uploads/2011/03/eich.jpg]
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          description: Incorrect data was transmitted when updating the avatar
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: The user with the specified _id was not found
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/{userId}:
    get:
      tags:
        - user
      summary: Get user by user id
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'uuid of the user'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/User'
        '404':
          description: The user for the specified {userId} was not found
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                examples: [false]
              message:
                type: string
                examples: [Internal server error]
            required:
              - success
              - message

    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                examples: [false]
              message:
                type: string
                examples: [The specified resource was not found]
            required:
              - success
              - message

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                examples: [false]
              message:
                type: string
                examples: [You must be authorized]
            required:
              - success
              - message

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                examples: [false]
              message:
                type: string
                examples: [Something wrong with the request]
            required:
              - success
              - message

    Card:
      description: Card object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Card'

    CardArray:
      description: Array of card objects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Card'

    UserArray:
      description: List of user objects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    User:
      description: User object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 40
          format: regex
          pattern: '[a-zA-Zа-яА-ЯёЁ\s\-]+'
          examples: ['Brendan Eich']
        about:
          type: string
          description: short text about the user, e.g profession
          minLength: 2
          maxLength: 200
          format: regex
          pattern: '[a-zA-Zа-яА-ЯёЁ\s\-]+'
          examples: ['JavaScript Creator']
        avatar:
          type: string
          description: Valid URL image link
          examples: ['https://techcrunch.com/wp-content/uploads/2011/03/eich.jpg']

    Card:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
          description: photo title
          minLength: 2
          maxLength: 30
          format: regex
          pattern: '[a-zA-Zа-яА-ЯёЁ\s\-]+'
          examples: [Mountain Lake]
        link:
          type: string
          description: Valid URL image link
        owner:
          $ref: '#/components/schemas/User'
        likes:
          type: array
          items:
            $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time

  examples:
    CreateCardA:
      value:
        name: Balloons
        link: https://images.unsplash.com/photo-1668877334122-b60dd15bc1b7?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80
      summary: Balloons
    CreateCardB:
      value:
        name: Japan
        link: https://images.unsplash.com/photo-1673946723153-4994870b64e1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80
      summary: Japan
    CreateCardC:
      value:
        name: Sweden
        link: https://images.unsplash.com/photo-1548777123-b54e9310e1bf?q=80&w=2319&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
      summary: Sweden
    CreateUserA:
      value:
        name: Brendan Eich
        about: JavaScript Creator
        avatar: https://techcrunch.com/wp-content/uploads/2011/03/eich.jpg
      summary: Brendan Eich

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
